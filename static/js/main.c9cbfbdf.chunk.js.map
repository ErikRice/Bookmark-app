{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","name","url","newBookmark","setNewBookmark","storedBookmarks","setStoredBookmarks","handleChange","event","target","id","value","console","log","handleDelete","bookmarkIndex","Number","newBookmarkList","splice","className","onSubmit","preventDefault","htmlFor","type","onChange","map","bookmark","i","rel","href","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2PA6EeA,MAzEf,WACE,MAAsCC,mBAAS,CAC7CC,KAAM,GACNC,IAAK,KAFP,mBAAOC,EAAP,KAAoBC,EAApB,KAIA,EAA8CJ,mBAAS,IAAvD,mBAAOK,EAAP,KAAwBC,EAAxB,KAEMC,EAAe,SAACC,GACpBJ,EAAe,2BAAID,GAAL,kBAAmBK,EAAMC,OAAOC,GAAKF,EAAMC,OAAOE,UAYlEC,QAAQC,IAAIR,GAEZ,IAAMS,EAAe,SAACN,GACpB,IAAMO,EAAgBC,OAAOR,EAAMC,OAAOC,IACtCO,EAAe,YAAOZ,GAC1BY,EAAgBC,OAAOH,EAAe,GACtCH,QAAQC,IAAI,WAAYI,GACxBX,EAAmBW,IAGrB,OACE,qBAAKE,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACA,uDACC,uBAAMC,SAtBU,SAACZ,GACpBA,EAAMa,iBACNf,EAAmB,GAAD,mBAAKD,GAAL,CAAsBF,KACxCC,EAAe,CACbH,KAAM,GACNC,IAAK,MAiBJ,UACE,uBAAOoB,QAAQ,OAAf,0BACA,uBACGC,KAAK,OACLtB,KAAK,OACLS,GAAG,OACHc,SAAUjB,EACVI,MAAOR,EAAYF,OAEtB,uBAAM,uBACN,uBAAOqB,QAAQ,MAAf,iBACA,uBACGC,KAAK,OACLtB,KAAK,MACLS,GAAG,MACHc,SAAUjB,EACVI,MAAOR,EAAYD,MAEtB,uBAAM,uBACN,wBAAQqB,KAAK,SAAb,uBAGF,+DAEClB,EAAgBoB,KAAI,SAACC,EAAUC,GAC7B,OACE,gCAEI,mBAAGR,UAAU,WAAWV,OAAO,SAASmB,IAAI,aAAaC,KAAMH,EAASxB,IAAxE,SAA6E,4BAAIwB,EAASzB,SAE5F,wBAAQS,GAAIiB,EAAGG,QAAShB,EAAxB,sBAJQa,YCpDPI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c9cbfbdf.chunk.js","sourcesContent":["import './App.css';\nimport React from 'react';\nimport { useState } from 'react';\n\nfunction App() {\n  const [newBookmark, setNewBookmark] = useState({\n    name: \"\",\n    url: \"\"\n  })\n  const [storedBookmarks, setStoredBookmarks] = useState([]);\n  \n  const handleChange = (event) => {\n    setNewBookmark({...newBookmark, [event.target.id]: event.target.value});\n    // console.log(newBookmark);\n  }\n  \n  const handleSubmit = (event) => {\n    event.preventDefault();\n    setStoredBookmarks([...storedBookmarks, newBookmark]);\n    setNewBookmark({\n      name: \"\",\n      url: \"\"\n    })\n  };\n  console.log(storedBookmarks);\n\n  const handleDelete = (event) => {\n    const bookmarkIndex = Number(event.target.id);\n    let newBookmarkList = [...storedBookmarks]\n    newBookmarkList.splice(bookmarkIndex, 1);\n    console.log(\"filtered\", newBookmarkList)\n    setStoredBookmarks(newBookmarkList);\n  }\n  \n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <h2>Create a New Bookmark</h2>\n       <form onSubmit={handleSubmit}>\n         <label htmlFor=\"name\">Website Name</label>\n         <input \n            type=\"text\" \n            name=\"name\"\n            id=\"name\"\n            onChange={handleChange}\n            value={newBookmark.name}\n         />\n         <br /><br />\n         <label htmlFor=\"url\">URL</label>\n         <input\n            type=\"text\"\n            name=\"url\"\n            id=\"url\"\n            onChange={handleChange}\n            value={newBookmark.url}\n         />\n         <br /><br />\n         <button type=\"submit\">Submit</button>\n       </form>\n       \n       <p>------------------------------</p>\n       \n       {storedBookmarks.map((bookmark, i)=> {           //<------put this into a new component?//\n          return(\n            <div key={i}>\n              {/* <ul style={{listStyleType: \"none\"}}> */}\n                <a className=\"App-link\" target=\"_blank\" rel=\"noreferrer\" href={bookmark.url}><p>{bookmark.name}</p></a>\n              {/* </ul> */}\n              <button id={i} onClick={handleDelete}>Delete</button>\n            </div>\n          )\n       })}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}